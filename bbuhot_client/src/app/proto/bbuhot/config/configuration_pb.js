/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.bhuhot.service.Configuration', null, global);
goog.exportSymbol('proto.bhuhot.service.Configuration.Database', null, global);
goog.exportSymbol('proto.bhuhot.service.Configuration.DiscuzConfig', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bhuhot.service.Configuration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bhuhot.service.Configuration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bhuhot.service.Configuration.displayName = 'proto.bhuhot.service.Configuration';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bhuhot.service.Configuration.prototype.toObject = function(opt_includeInstance) {
  return proto.bhuhot.service.Configuration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bhuhot.service.Configuration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bhuhot.service.Configuration.toObject = function(includeInstance, msg) {
  var f, obj = {
    database: (f = msg.getDatabase()) && proto.bhuhot.service.Configuration.Database.toObject(includeInstance, f),
    discuzConfig: (f = msg.getDiscuzConfig()) && proto.bhuhot.service.Configuration.DiscuzConfig.toObject(includeInstance, f),
    host: jspb.Message.getField(msg, 3),
    port: jspb.Message.getField(msg, 4),
    isDebug: jspb.Message.getField(msg, 5),
    allowCors: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bhuhot.service.Configuration}
 */
proto.bhuhot.service.Configuration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bhuhot.service.Configuration;
  return proto.bhuhot.service.Configuration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bhuhot.service.Configuration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bhuhot.service.Configuration}
 */
proto.bhuhot.service.Configuration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bhuhot.service.Configuration.Database;
      reader.readMessage(value,proto.bhuhot.service.Configuration.Database.deserializeBinaryFromReader);
      msg.setDatabase(value);
      break;
    case 2:
      var value = new proto.bhuhot.service.Configuration.DiscuzConfig;
      reader.readMessage(value,proto.bhuhot.service.Configuration.DiscuzConfig.deserializeBinaryFromReader);
      msg.setDiscuzConfig(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsDebug(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowCors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bhuhot.service.Configuration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bhuhot.service.Configuration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bhuhot.service.Configuration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bhuhot.service.Configuration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDatabase();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bhuhot.service.Configuration.Database.serializeBinaryToWriter
    );
  }
  f = message.getDiscuzConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bhuhot.service.Configuration.DiscuzConfig.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bhuhot.service.Configuration.Database = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bhuhot.service.Configuration.Database, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bhuhot.service.Configuration.Database.displayName = 'proto.bhuhot.service.Configuration.Database';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bhuhot.service.Configuration.Database.prototype.toObject = function(opt_includeInstance) {
  return proto.bhuhot.service.Configuration.Database.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bhuhot.service.Configuration.Database} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bhuhot.service.Configuration.Database.toObject = function(includeInstance, msg) {
  var f, obj = {
    connectionUrl: jspb.Message.getField(msg, 1),
    user: jspb.Message.getField(msg, 2),
    password: jspb.Message.getField(msg, 3),
    tablePrefix: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bhuhot.service.Configuration.Database}
 */
proto.bhuhot.service.Configuration.Database.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bhuhot.service.Configuration.Database;
  return proto.bhuhot.service.Configuration.Database.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bhuhot.service.Configuration.Database} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bhuhot.service.Configuration.Database}
 */
proto.bhuhot.service.Configuration.Database.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectionUrl(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUser(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTablePrefix(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bhuhot.service.Configuration.Database.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bhuhot.service.Configuration.Database.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bhuhot.service.Configuration.Database} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bhuhot.service.Configuration.Database.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * required string connection_url = 1;
 * @return {string}
 */
proto.bhuhot.service.Configuration.Database.prototype.getConnectionUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bhuhot.service.Configuration.Database.prototype.setConnectionUrl = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.bhuhot.service.Configuration.Database.prototype.clearConnectionUrl = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bhuhot.service.Configuration.Database.prototype.hasConnectionUrl = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string user = 2;
 * @return {string}
 */
proto.bhuhot.service.Configuration.Database.prototype.getUser = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.bhuhot.service.Configuration.Database.prototype.setUser = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.bhuhot.service.Configuration.Database.prototype.clearUser = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bhuhot.service.Configuration.Database.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string password = 3;
 * @return {string}
 */
proto.bhuhot.service.Configuration.Database.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.bhuhot.service.Configuration.Database.prototype.setPassword = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.bhuhot.service.Configuration.Database.prototype.clearPassword = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bhuhot.service.Configuration.Database.prototype.hasPassword = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string table_prefix = 4;
 * @return {string}
 */
proto.bhuhot.service.Configuration.Database.prototype.getTablePrefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.bhuhot.service.Configuration.Database.prototype.setTablePrefix = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.bhuhot.service.Configuration.Database.prototype.clearTablePrefix = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bhuhot.service.Configuration.Database.prototype.hasTablePrefix = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bhuhot.service.Configuration.DiscuzConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bhuhot.service.Configuration.DiscuzConfig.repeatedFields_, null);
};
goog.inherits(proto.bhuhot.service.Configuration.DiscuzConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bhuhot.service.Configuration.DiscuzConfig.displayName = 'proto.bhuhot.service.Configuration.DiscuzConfig';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bhuhot.service.Configuration.DiscuzConfig.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bhuhot.service.Configuration.DiscuzConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.bhuhot.service.Configuration.DiscuzConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bhuhot.service.Configuration.DiscuzConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bhuhot.service.Configuration.DiscuzConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    authKey: jspb.Message.getField(msg, 1),
    adminGroupList: jspb.Message.getRepeatedField(msg, 2),
    cookiePre: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bhuhot.service.Configuration.DiscuzConfig}
 */
proto.bhuhot.service.Configuration.DiscuzConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bhuhot.service.Configuration.DiscuzConfig;
  return proto.bhuhot.service.Configuration.DiscuzConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bhuhot.service.Configuration.DiscuzConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bhuhot.service.Configuration.DiscuzConfig}
 */
proto.bhuhot.service.Configuration.DiscuzConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addAdminGroup(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCookiePre(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bhuhot.service.Configuration.DiscuzConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bhuhot.service.Configuration.DiscuzConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bhuhot.service.Configuration.DiscuzConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bhuhot.service.Configuration.DiscuzConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAdminGroupList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * required string auth_key = 1;
 * @return {string}
 */
proto.bhuhot.service.Configuration.DiscuzConfig.prototype.getAuthKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bhuhot.service.Configuration.DiscuzConfig.prototype.setAuthKey = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.bhuhot.service.Configuration.DiscuzConfig.prototype.clearAuthKey = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bhuhot.service.Configuration.DiscuzConfig.prototype.hasAuthKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated int32 admin_group = 2;
 * @return {!Array<number>}
 */
proto.bhuhot.service.Configuration.DiscuzConfig.prototype.getAdminGroupList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<number>} value */
proto.bhuhot.service.Configuration.DiscuzConfig.prototype.setAdminGroupList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.bhuhot.service.Configuration.DiscuzConfig.prototype.addAdminGroup = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.bhuhot.service.Configuration.DiscuzConfig.prototype.clearAdminGroupList = function() {
  this.setAdminGroupList([]);
};


/**
 * required string cookie_pre = 3;
 * @return {string}
 */
proto.bhuhot.service.Configuration.DiscuzConfig.prototype.getCookiePre = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.bhuhot.service.Configuration.DiscuzConfig.prototype.setCookiePre = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.bhuhot.service.Configuration.DiscuzConfig.prototype.clearCookiePre = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bhuhot.service.Configuration.DiscuzConfig.prototype.hasCookiePre = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required Database database = 1;
 * @return {!proto.bhuhot.service.Configuration.Database}
 */
proto.bhuhot.service.Configuration.prototype.getDatabase = function() {
  return /** @type{!proto.bhuhot.service.Configuration.Database} */ (
    jspb.Message.getWrapperField(this, proto.bhuhot.service.Configuration.Database, 1, 1));
};


/** @param {!proto.bhuhot.service.Configuration.Database} value */
proto.bhuhot.service.Configuration.prototype.setDatabase = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.bhuhot.service.Configuration.prototype.clearDatabase = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bhuhot.service.Configuration.prototype.hasDatabase = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required DiscuzConfig discuz_config = 2;
 * @return {!proto.bhuhot.service.Configuration.DiscuzConfig}
 */
proto.bhuhot.service.Configuration.prototype.getDiscuzConfig = function() {
  return /** @type{!proto.bhuhot.service.Configuration.DiscuzConfig} */ (
    jspb.Message.getWrapperField(this, proto.bhuhot.service.Configuration.DiscuzConfig, 2, 1));
};


/** @param {!proto.bhuhot.service.Configuration.DiscuzConfig} value */
proto.bhuhot.service.Configuration.prototype.setDiscuzConfig = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.bhuhot.service.Configuration.prototype.clearDiscuzConfig = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bhuhot.service.Configuration.prototype.hasDiscuzConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string host = 3;
 * @return {string}
 */
proto.bhuhot.service.Configuration.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.bhuhot.service.Configuration.prototype.setHost = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.bhuhot.service.Configuration.prototype.clearHost = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bhuhot.service.Configuration.prototype.hasHost = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 port = 4;
 * @return {number}
 */
proto.bhuhot.service.Configuration.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.bhuhot.service.Configuration.prototype.setPort = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.bhuhot.service.Configuration.prototype.clearPort = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bhuhot.service.Configuration.prototype.hasPort = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required bool is_debug = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bhuhot.service.Configuration.prototype.getIsDebug = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.bhuhot.service.Configuration.prototype.setIsDebug = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.bhuhot.service.Configuration.prototype.clearIsDebug = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bhuhot.service.Configuration.prototype.hasIsDebug = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required bool allow_cors = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bhuhot.service.Configuration.prototype.getAllowCors = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.bhuhot.service.Configuration.prototype.setAllowCors = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.bhuhot.service.Configuration.prototype.clearAllowCors = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.bhuhot.service.Configuration.prototype.hasAllowCors = function() {
  return jspb.Message.getField(this, 6) != null;
};


goog.object.extend(exports, proto.bhuhot.service);
